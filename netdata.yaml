apiVersion: v1
kind: ConfigMap
metadata:
  name: netdata-conf-slave
  labels:
    app: netdata
data:
  coredns:     |
      update_every: 1
      autodetection_retry: 0
      jobs:
        - url: http://127.0.0.1:9153/metrics

  kubelet:     |
      update_every: 1
      autodetection_retry: 0
      jobs:
        - url: http://127.0.0.1:10255/metrics

  kubeproxy:     |
      update_every: 1
      autodetection_retry: 0
      jobs:
        - url: http://127.0.0.1:10249/metrics

  netdata:     |
      [global]
        memory mode = none
      [health]
        enabled = no

  stream:     |
      [stream]
        enabled = yes
        destination = netdata:19999
        api key = CFE4E515-05BD-4449-A237-65CD7691BC46
        timeout seconds = 60
        buffer size bytes = 1048576
        reconnect delay seconds = 5
        initial clock resync iterations = 60


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: netdata-conf-master
  labels:
    app: netdata
data:
  health:     |
      SEND_EMAIL="NO"

  netdata:     |
      [global]
        memory mode = save
        bind to = 0.0.0.0:19999
      [plugins]
        cgroups = no
        tc = no
        enable running new plugins = no
        check for new plugins every = 72000
        python.d = no
        charts.d = no
        go.d = no
        node.d = no
        apps = no
        proc = no
        diskspace = no
        idlejitter = no

  stream:     |
      [CFE4E515-05BD-4449-A237-65CD7691BC46]
        enabled = yes
        history = 3600
        default memory mode = save
        health enabled by default = auto
        allow from = *


---
# Source: netdata/templates/serviceaccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  labels:
    app: netdata
  name: netdata
---
# Source: netdata/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-netdata
  labels:
    app: netdata
rules:
- apiGroups: [""]
  resources: ["services", "events", "endpoints", "pods", "nodes", "componentstatuses", "nodes/proxy" ]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["resourcequotas"]
  verbs: ["get", "list"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/version", "/healthz", "/metrics"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["nodes/metrics", "nodes/spec"]
  verbs: ["get"]
---
# Source: netdata/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-netdata
  labels:
    app: netdata
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-netdata
subjects:
- kind: ServiceAccount
  name: netdata
  namespace: default
---
# Source: netdata/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: netdata
  labels:
    app: netdata
    role: master
spec:
  type: ClusterIP
  ports:
    - port: 19999
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: netdata
    role: master

---
# Source: netdata/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    container.apparmor.security.beta.kubernetes.io/netdata-slave: unconfined
  name: netdata-slave
  labels:
    app: netdata
    role: slave
spec:
  selector:
    matchLabels:
      app: netdata
      role: slave
  template:
    metadata:
      labels:
        app: netdata
        role: slave
    spec:
      serviceAccountName: netdata
      restartPolicy: Always
      hostPID: true
      hostIPC: true
      hostNetwork: true
      initContainers:
      containers:
        - name: netdata
          image: "netdata/netdata:v1.15.0"
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh","-c","python -c 'import uuid; import socket; print(uuid.uuid3(uuid.NAMESPACE_DNS, socket.gethostname()))' > /var/lib/netdata/registry/netdata.public.unique.id"]
            preStop:
              exec:
                command: ["/bin/sh","-c","killall netdata; while killall -0 netdata; do sleep 1; done"]
          ports:
            - name: http
              containerPort: 19999
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v1/info
              port: http
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/info
              port: http
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: proc
              readOnly: true
              mountPath: /host/proc
            - name: run
              mountPath: /var/run/docker.sock
            - name: sys
              mountPath: /host/sys
            - name: cache
              mountPath: /var/cache/netdata
            - name: lib
              mountPath: /var/lib/netdata
            - name: config
              mountPath: /etc/netdata/go.d/coredns.conf
              subPath: coredns
            - name: config
              mountPath: /etc/netdata/go.d/k8s_kubelet.conf
              subPath: kubelet
            - name: config
              mountPath: /etc/netdata/go.d/k8s_kubeproxy.conf
              subPath: kubeproxy
            - name: config
              mountPath: /etc/netdata/netdata.conf
              subPath: netdata
            - name: config
              mountPath: /etc/netdata/stream.conf
              subPath: stream
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
                - SYS_ADMIN
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: run
          hostPath:
            path: /var/run/docker.sock
        - name: sys
          hostPath:
            path: /sys
        - name: cache
          hostPath:
            path: /var/lib/netdata/cache
            type: DirectoryOrCreate
        - name: lib
          hostPath:
            path: /var/lib/netdata/lib
            type: DirectoryOrCreate
        - name: config
          configMap:
            name: netdata-conf-slave
      dnsPolicy: ClusterFirstWithHostNet

---
# Source: netdata/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: netdata-master
  labels:
    app: netdata
    role: master
spec:
  serviceName: netdata
  replicas: 1
  selector:
    matchLabels:
      app: netdata
      role: master
  template:
    metadata:
      labels:
        app: netdata
        role: master
    spec:
      securityContext:
        fsGroup: 201
      serviceAccountName: netdata
      initContainers:
      containers:
        - name: netdata
          image: "netdata/netdata:v1.15.0"
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","python -c 'import uuid; import socket; print(uuid.uuid3(uuid.NAMESPACE_DNS, socket.gethostname()))' > /var/lib/netdata/registry/netdata.public.unique.id"]
            preStop:
              exec:
                command: ["/bin/sh","-c","killall netdata; while killall -0 netdata; do sleep 1; done"]
          ports:
            - name: http
              containerPort: 19999
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /api/v1/info
              port: http
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/v1/info
              port: http
            timeoutSeconds: 1
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /etc/netdata/health_alarm_notify.conf
              subPath: health
            - name: config
              mountPath: /etc/netdata/netdata.conf
              subPath: netdata
            - name: config
              mountPath: /etc/netdata/stream.conf
              subPath: stream
            - name: database
              mountPath: /var/cache/netdata
            - name: alarms
              mountPath: /var/lib/netdata
      volumes:
        - name: config
          configMap:
            name: netdata-conf-master
        - name: database
          hostPath:
            path: /var/lib/netdata-master/database
            type: DirectoryOrCreate
        - name: alarms
          hostPath:
            path: /var/lib/netdata-master/alarms
            type: DirectoryOrCreate

---
# Source: netdata/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: netdata
  labels:
    app: netdata
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    certmanager.k8s.io/acme-challenge-type: dns01
    certmanager.k8s.io/acme-dns01-provider: route53
spec:
  rules:
    - host: stats.home.johnson.computer
      http:
        paths:
          - path: /
            backend:
              serviceName: netdata
              servicePort: http
  tls:
    - hosts:
      - stats.home.johnson.computer
      secretName: netdata-certificate
